<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="2000" height="544" fontSize="14">
	<mx:Script>
		<![CDATA[
			import cl.larrainvial.carterasAFP.events.CargaEvent;
			import cl.larrainvial.carterasAFP.events.ImportarEvent;
			import cl.larrainvial.carterasAFP.events.ProcesoEvent;
			import cl.larrainvial.carterasAFP.model.ModelLocator;
			
			import com.as3xls.xls.ExcelFile;
			import com.as3xls.xls.Sheet;
			
			import mx.controls.Alert;
			import mx.formatters.DateFormatter;
			import mx.managers.CursorManager;
			import mx.managers.PopUpManager;
			
			[Bindable]
			private var model:ModelLocator = ModelLocator.getInstance();
			
			private var uploadURL:URLRequest;
			private var fileRef:FileReference;
			
			
			
			
			
			
			protected function fnBuscarArchivo(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				var arr:Array = [];
				arr.push(new FileFilter("Archivos Excel 2003", "*.xlsx"));
				fileRef = new FileReference();
				fileRef.addEventListener(Event.SELECT, fileRef_select);
				//fileRef.addEventListener(Event.COMPLETE, fileRef_complete);
				fileRef.addEventListener(Event.CANCEL, fileRef_close);
				fileRef.addEventListener(Event.CLOSE, fileRef_close);
				fileRef.addEventListener(IOErrorEvent.IO_ERROR, fileRef_error);
				
				fileRef.browse(arr);
				
				
				
			}
			
			public function onComplete(evt:Event):void 
			{ 
				
				fileRef.removeEventListener(Event.SELECT, fileRef_select);
				fileRef.removeEventListener(Event.COMPLETE, onComplete);
				fileRef.removeEventListener(IOErrorEvent.IO_ERROR, fileRef_error);
				var xmlStr: String = "";
				xmlStr += "<ARCHIVO>";
				xmlStr += "<DESCRIPCION_ARCHIVO>";
				xmlStr += "<NOMBRE_ARCHIVO>" + fileRef.name + "</NOMBRE_ARCHIVO>";
				xmlStr += "<USUARIO>" + model.Loggeado + "</USUARIO>";
				xmlStr += "<PERIODO>" + cbPeriodo.selectedItem.label + "</PERIODO>";
				xmlStr += "<PAIS>" + cbPais.selectedItem.label + "</PAIS>";
				xmlStr += "<CARTERA>" + cbTipoCartera.selectedItem.label + "</CARTERA>";
				xmlStr += "</DESCRIPCION_ARCHIVO>";
				xmlStr += "</ARCHIVO>";
				var evento: ImportarEvent = new ImportarEvent(xmlStr);
				evento.callback = fnResultImport;
				evento.dispatch();
				txtNomArchivo.text = '';
				
							
							
		 
			} 
			
			
			private function fileRef_select(evt:Event):void 
			{
				var arrValNombre:Array = evt.currentTarget.name.split('.')[0].split('_');
				if(cbPeriodo.selectedItem){
					if(arrValNombre.length == 3){
						
						var resultado:String = '';					
						var reg:RegExp = /cbPeriodo.selectedItem/;				
						var val:* = arrValNombre[2].search(reg);
						
						if(arrValNombre[0] == 'Cartera' && arrValNombre[1] == 'Agregada'){
							if(arrValNombre[2] == cbPeriodo.selectedItem.label.split("-").join("")){
								fileRef.addEventListener(ProgressEvent.PROGRESS, onProgress); 
								fileRef.addEventListener(Event.COMPLETE, onComplete);			
								txtNomArchivo.text = fileRef.name;	
							} else {
								Alert.show("El periodo seleccionado no corresponde al periodo del archivo.", "Atención");
								return;
							}
							
							
						} else {
							
							Alert.show("Nombre del archivo no corresponde, debe ser Cartera_Agregada_[aaaamm].xls, donde aaaamm corresponde a año y mes. Ejemplo de nombre de archivo: “Cartera_Agregada_201801.xlsx”.", "Atención");
							return;
						}				
						
					} else {
						Alert.show("Nombre del archivo no corresponde, debe ser Cartera_Agregada_[aaaamm].xls, donde aaaamm corresponde a año y mes. Ejemplo de nombre de archivo: “Cartera_Agregada_201801.xlsx”.", "Atención");
						return;
					}	
				} else {
					Alert.show("Debe seleccionar un periodo previamente a cargar un archivo”.", "Atención");
					return;
				}
				
				
				
				
				
			}
			
			
			public function onProgress(evt:ProgressEvent):void 
			{ 
				trace("Loaded " + evt.bytesLoaded + " of " + evt.bytesTotal + " bytes."); 
			} 
			
			private function importar(): void
			{
				var arr:Array = [];
				arr.push(new FileFilter("Archivos Excel", "*.xlsx"));
				fileRef = new FileReference();
				fileRef.addEventListener(Event.SELECT, fileRef_select);
				//fileRef.addEventListener(Event.COMPLETE, fileRef_complete);
				fileRef.addEventListener(Event.CANCEL, fileRef_close);
				fileRef.addEventListener(Event.CLOSE, fileRef_close);
				fileRef.addEventListener(IOErrorEvent.IO_ERROR, fileRef_error);
				
				fileRef.browse(arr);
			}
			
			private function fileRef_close(evt:Event):void
			{
				CursorManager.removeBusyCursor();
			}
			
			
			
			
			private function fileRef_error(evt: IOErrorEvent):void
			{
				CursorManager.removeBusyCursor();
				fileRef.removeEventListener(Event.SELECT, fileRef_select);
				fileRef.removeEventListener(IOErrorEvent.IO_ERROR, fileRef_error);
				Alert.show("El archivo no pudo ser subido, \nPor favor reintentar", "Error", Alert.OK, null, null);
			}
			
			
			
			protected function fnCargaArchivo(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				
				var request:URLRequest = new URLRequest(model.rutaUpload); 
				try 
				{ 
					CursorManager.setBusyCursor();
					request.contentType = "multipart/form-data";
					request.method = "POST";
					fileRef.upload(request, fileRef.name, false); 
					
					CursorManager.removeBusyCursor();
					
				} 
				catch (error:Error) 
				{ 
					CursorManager.removeBusyCursor();
					trace("Unable to upload file."); 
				}
				
				
				
				
				
			}
			
			
			private function fnResultImport(param:*):void{
				var cargaEvent:CargaEvent = new CargaEvent();
				cargaEvent.xmlParam = '<WSParam><Parametros><XmlIn><Root><Dato periodo="' + cbPeriodo.text + '"/></Root></XmlIn></Parametros></WSParam>';
				cargaEvent.dispatch();
			}
			
			
			private function fnResult(param:*):void{
				var pop:PopIngreso = new PopIngreso();
				PopUpManager.addPopUp(pop, this.parentApplication as DisplayObject, true);
				PopUpManager.centerPopUp(pop);
			}
			
			protected function fnEjecutarProceso(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				var ev:ProcesoEvent = new ProcesoEvent(ProcesoEvent.EVENT_PROCESO);
				ev.callback = fnResult;
				var arr:Array = cbPeriodo.text.split('-');
				var df:DateFormatter = new DateFormatter();
				df.formatString = 'YYYY-MM-DD';
				var date:Date = new Date();
				date.fullYear = arr[0];
				date.month = Number(arr[1]);
				date.date = 1;
				
				ev.xmlparam = '<WSParam><Parametros><XmlIn><Root><Dato periodo="' + df.format(date) + '"/></Root></XmlIn></Parametros></WSParam>';
				ev.dispatch();
			}
			
			protected function fnBuscar(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				var cargaEvent:CargaEvent = new CargaEvent();
				cargaEvent.xmlParam = '<WSParam><Parametros><XmlIn><Root><Dato periodo="' + cbPeriodo2.text + '"/></Root></XmlIn></Parametros></WSParam>';
				cargaEvent.dispatch();
			}
			
		]]>
	</mx:Script>
	<mx:VBox width="100%" height="100%">
		<mx:HBox width="100%" horizontalGap="0" horizontalAlign="center">
			<mx:Form width="50%" verticalGap="30">
				<mx:FormItem width="100%" label="Periodo" horizontalAlign="left">
					<mx:ComboBox id="cbPeriodo" y="29" width="165" dataProvider="{model.arrPeriodos}"
								 horizontalCenter="0" labelField="label" selectedIndex="{cbPeriodo2.selectedIndex}"></mx:ComboBox>	
				</mx:FormItem>
				<mx:FormItem width="100%" label="Tipo Cartera" horizontalAlign="left">
					<mx:ComboBox id="cbTipoCartera" y="69" width="165"
								 dataProvider="{model.arrTipoCartera}" horizontalCenter="0"></mx:ComboBox>
				</mx:FormItem>
				<mx:FormItem width="100%" label="País" horizontalAlign="left">
					<mx:ComboBox id="cbPais" y="29" width="165" dataProvider="{model.arrPais}"
								 horizontalCenter="0" labelField="label"></mx:ComboBox>	
				</mx:FormItem>
				<mx:FormItem width="100%" label="Archivo" horizontalAlign="left">
					<mx:HBox>
						<mx:TextInput id="txtNomArchivo" width="165" click="fnBuscarArchivo(event)"
									  editable="false" horizontalCenter="0"/>
						<mx:Button width="125" label="Examinar" click="fnBuscarArchivo(event)"/>
						<mx:Button width="125" label="Cargar Archivo" click="fnCargaArchivo(event)" enabled="{txtNomArchivo.text == '' ? false : true}"/>
					</mx:HBox>
					
				</mx:FormItem>
				<mx:FormItem width="100%" horizontalAlign="left">
					<mx:Button width="165" height="40" label="Ejecutar Proceso" horizontalCenter="0" click="fnEjecutarProceso(event)"/>	
				</mx:FormItem>
				
			</mx:Form>
			
			
		</mx:HBox>
		<mx:HBox width="100%" horizontalAlign="right">
			<mx:ComboBox id="cbPeriodo2" y="29" width="165" dataProvider="{model.arrPeriodos}" selectedIndex="{cbPeriodo.selectedIndex}"
						 horizontalCenter="0" labelField="label"></mx:ComboBox>	
			<mx:Button label="Buscar" click="fnBuscar(event)"/>
		</mx:HBox>
		<mx:DataGrid height="100%" width="100%" id="dg" dataProvider="{model.arrCarga}">
			
			<mx:columns>
				<mx:DataGridColumn dataField="anio" headerText="Año"/>
				<mx:DataGridColumn dataField="periodo" headerText="Periodo"/>
				<mx:DataGridColumn dataField="nemo" headerText="Nemotécnico"/>
				<mx:DataGridColumn dataField="institucion" headerText="Institución"/>
				<mx:DataGridColumn dataField="fondoA" headerText="Fondo A"/>
				<mx:DataGridColumn dataField="fondoB" headerText="Fondo B"/>
				<mx:DataGridColumn dataField="fondoC" headerText="Fondo C"/>
				<mx:DataGridColumn dataField="fondoD" headerText="Fondo D"/>
				<mx:DataGridColumn dataField="fondoE" headerText="Fondo E"/>
				<mx:DataGridColumn dataField="total" headerText="Total"/>
				<mx:DataGridColumn dataField="porcentaje_total" headerText="Total %"/>
			</mx:columns>
		</mx:DataGrid>	
	</mx:VBox>
	
	
	
	
	
	
	
	
</mx:Canvas>
